@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>JSNLogDemo_Log4Net_CORS</title>
   @Html.Raw(JSNLog.JavascriptLogging.Configure())
</head>
<body>
    <h1>JSNLogDemo_Log4Net_CORS</h1>
	
	<p>
	Log messages are sent to server the moment this page is opened.
	</p>
	
	
	

	<p>
		This demo site shows the CORS feature, and so uses 2 domains - one at which the site is hosted and one at which the 
		logging end point is located. The logging end point is the url where JSNLog sends its log entries.
		 It is the fact that the site and logging end point are on different domains that makes CORS required here. 
	</p>
    <p>
        To make this demo site work:
    </p>
    <ul>
        <li>
			In IIS, create a new site that points at the directory where the files of this demo site are located.
            That is, the directory with the .csproj.
        </li>
        <li>
            Create a binding with host name <i>corslocalhost.local</i>. You'll use this domain to run the demo site itself.
        </li>
        <li>
            Create a second binding with host name <i>apicorslocalhost.local</i>. 
            All log requests will be sent to this domain.
            See the web.config file.
        </li>
        <li>
			Don't forget to add these domains to your hosts file, at <i>C:\Windows\System32\drivers\etc\hosts</i>.
        </li>
    </ul>
	<p>
		In this demo, CORS has been configured in code, in Global.asax.cs. It could also have been configured in the jsnlog element in the web.config. 
	</p>


	
    <script type="text/ecmascript">
	
	
	
	window.onerror = function (errorMsg, url, lineNumber, column, errorObj) {
		// Send object with all data to server side log, using severity fatal, 
		// from logger "onerrorLogger"
		JL("onerrorLogger").fatalException({
			"msg": "Exception!", 
			"errorMsg": errorMsg, "url": url, 
			"line number": lineNumber, "column": column
		}, errorObj);
			
		// Tell browser to run its own error handler as well   
		return false;
	}

	// Log with every severity
    JL("jsLogger").debug("debug client log message");
    JL("jsLogger").info("info client log message");
    JL("jsLogger").warn({ msg: 'warn client log message - logging object', x: 5, y: 88 });
    JL("jsLogger").error(function() { return "error client log message - returned by function"; });
    JL("jsLogger").fatal("fatal client log message");

	// Log caught exception
	try {
		// ReferenceError: xyz is not defined
		xyz;
	} catch (e) {
		// Log the exception
		JL().fatalException("Something went wrong!", e);
	}
	
	// ReferenceError: xyz2 is not defined. Should be caught by onerror handler.
	xyz2;
	
    </script>
        
    <div>
    </div>
</body>
</html>




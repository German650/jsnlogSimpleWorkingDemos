@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>EmptyLog4Net - </title>
    @Html.Raw(JSNLog.JavascriptLogging.Configure())
</head>
<body>
    <h1>EmptyLog4Net - beforeSend</h1>
    <script type="text/ecmascript">
    JL("jsLogger").fatal("client log message without additional headers");
    alert('log4net - beforeSend');

      // -----------------------
      // beforeSend example
      //
      // Shows a number of things you can do by setting the beforeSend option
      // to a function.

    var beforeSendExample = function (xhr, json) {

        // ------------------------------------------------------------------
        // Modify the first message

        json.lg[0].m += " - added by function beforeSendExample";

        // ------------------------------------------------------------------
        // Add request header

        xhr.setRequestHeader('JSNLog-Custom-TestHeader', 'test value');

        // ------------------------------------------------------------------
        // Do something if the log message could not be sent to the server

        // Replace send function with one that saves the message in the xhr, for
        // use when response indicates failure.
        xhr.originalSend = xhr.send;
        xhr.send = function (msg) {
            xhr.msg = msg; // Store message in xhr
            xhr.originalSend(msg);
        }

        // Set response handler that checks if response received (readyState == 4)
        // and response status is not 200 (OK). In that case, do something to deal with
        // failure to log the message.
        xhr.onreadystatechange = function () {
            if (xhr.readyState != 4) { return; }
            if (xhr.status == 200) { return; }

            console.log('Cannot log to server. Status: ' + xhr.status + '. Messsage: ' + xhr.msg);
        };

        // Handle timeouts
        xhr.timeout = 10000; // set timeout to 10 seconds
        xhr.ontimeout = function () {
            console.log('Cannot log to server. Timed out after ' + xhr.timeout + '. Messsage: ' + xhr.msg);
        };
    };

    var appender = JL.createAjaxAppender("example appender");
    appender.setOptions({
        "beforeSend": beforeSendExample
    });

    JL().setOptions({
        "appenders": [appender]
    });

    JL("jsLogger").fatal("client log message with additional headers");
    </script>
        
    <div>
    </div>
</body>
</html>
